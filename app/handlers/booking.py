import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.db.crud import get_available_tables, create_booking, get_user_bookings, cancel_booking
from app.utils.clear import track_message, clear_tracked_messages

router = Router(name="booking")

ALL_TABLES = [1, 2, 3, 4, 5]
TIME_OPTIONS = ["18:00", "19:00", "20:00", "21:00"]

class BookingForm(StatesGroup):
    choosing_date = State()
    choosing_time = State()
    choosing_table = State()
    contact = State()
    confirming_cancel = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" ---

def booking_main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å", callback_data="create_booking"),
            InlineKeyboardButton(text="–í–∞—à–∏ –±—Ä–æ–Ω–∏", callback_data="user_bookings")
        ]
    ])

def date_keyboard_booking() -> InlineKeyboardMarkup:
    buttons = []
    today = datetime.date.today()
    for i in range(7):
        day = today + datetime.timedelta(days=i)
        date_iso = day.isoformat()
        date_text = day.strftime("%d.%m (%a)")
        if i == 0: date_text = f"–°–µ–≥–æ–¥–Ω—è, {date_text}"
        if i == 1: date_text = f"–ó–∞–≤—Ç—Ä–∞, {date_text}"
        buttons.append([InlineKeyboardButton(text=date_text, callback_data=f"book_date:{date_iso}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cat_booking_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def time_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text=t, callback_data=f"book_time:{t}")] for t in TIME_OPTIONS]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="booking_go_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def table_keyboard(tables: list[int]):
    buttons = [[InlineKeyboardButton(text=f"–°—Ç–æ–ª–∏–∫ {t}", callback_data=f"book_table:{t}")] for t in tables]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="booking_go_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def cancel_booking_keyboard(bookings):
    buttons = [[InlineKeyboardButton(
        text=f"{b.datetime.strftime('%d.%m %H:%M')} ‚Äî –°—Ç–æ–ª–∏–∫ {b.table_number}",
        callback_data=f"cancel_booking:{b.id}"
    )] for b in bookings]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cat_booking_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)
    
def back_kb_booking() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="booking_go_back")]
    ])

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@router.callback_query(F.data == "cat_booking")
async def booking_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await clear_tracked_messages(state, bot, callback.from_user.id)
    sent_message = await callback.message.answer("üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–æ–≤", reply_markup=booking_main_kb())
    await track_message(state, sent_message)
    await callback.answer()

@router.callback_query(F.data == "cat_booking_menu")
async def booking_menu_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    edited_message = await callback.message.edit_text("üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–æ–≤", reply_markup=booking_main_kb())
    await track_message(state, edited_message)
    await callback.answer()

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä "–ù–∞–∑–∞–¥" –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
@router.callback_query(F.data == "booking_go_back", StateFilter(BookingForm))
async def booking_go_back_handler(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    edited_message = None

    if current_state == BookingForm.contact:
        data = await state.get_data()
        available_tables = await get_available_tables(data['date'], data['time'], ALL_TABLES)
        edited_message = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:", reply_markup=table_keyboard(available_tables))
        await state.set_state(BookingForm.choosing_table)
    elif current_state == BookingForm.choosing_table:
        edited_message = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard())
        await state.set_state(BookingForm.choosing_time)
    elif current_state == BookingForm.choosing_time:
        edited_message = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard_booking())
        await state.set_state(BookingForm.choosing_date)

    if edited_message:
        await track_message(state, edited_message)
    await callback.answer()

# --- –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏ ---

@router.callback_query(F.data == "create_booking")
async def choose_date(callback: CallbackQuery, state: FSMContext):
    edited_message = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_keyboard_booking())
    await track_message(state, edited_message)
    await state.set_state(BookingForm.choosing_date)
    await callback.answer()

@router.callback_query(F.data.startswith("book_date:"), BookingForm.choosing_date)
async def date_chosen(callback: CallbackQuery, state: FSMContext):
    await state.update_data(date=callback.data.split(":")[1])
    edited_message = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard())
    await track_message(state, edited_message)
    await state.set_state(BookingForm.choosing_time)
    await callback.answer()

@router.callback_query(F.data.startswith("book_time:"), BookingForm.choosing_time)
async def time_chosen(callback: CallbackQuery, state: FSMContext):
    selected_time = callback.data.replace("book_time:", "")
    data = await state.get_data()
    selected_date = data['date']
    await state.update_data(time=selected_time)
    
    available_tables = await get_available_tables(selected_date, selected_time, ALL_TABLES)
    if not available_tables:
        edited_message = await callback.message.edit_text(f"–ù–∞ {selected_date} {selected_time} –≤—Å–µ —Å—Ç–æ–ª–∏–∫–∏ –∑–∞–Ω—è—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", reply_markup=time_keyboard())
        await track_message(state, edited_message)
        return

    edited_message = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:", reply_markup=table_keyboard(available_tables))
    await track_message(state, edited_message)
    await state.set_state(BookingForm.choosing_table)
    await callback.answer()

@router.callback_query(F.data.startswith("book_table:"), BookingForm.choosing_table)
async def table_chosen(callback: CallbackQuery, state: FSMContext):
    await state.update_data(table_number=int(callback.data.split(":")[1]))
    edited_message = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:", reply_markup=back_kb_booking())
    await track_message(state, edited_message)
    await state.set_state(BookingForm.contact)
    await callback.answer()

@router.message(BookingForm.contact, F.text)
async def enter_contact(message: Message, state: FSMContext, bot: Bot):
    await clear_tracked_messages(state, bot, message.from_user.id)
    await message.delete()
    data = await state.get_data()
    await create_booking(
        tg_id=message.from_user.id,
        table_number=data["table_number"],
        booking_date=data["date"],
        booking_time=data["time"],
        contact=message.text.strip()
    )
    await message.answer(
        f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['date']} {data['time']}</b>\n"
        f"–°—Ç–æ–ª–∏–∫: {data['table_number']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {message.text.strip()}"
    )
    await state.clear()

# --- –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–µ–π ---
async def show_user_bookings(callback: CallbackQuery, state: FSMContext):
    bookings = await get_user_bookings(callback.from_user.id)
    text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–µ–π."
    reply_markup = None
    if bookings:
        text = "–í–∞—à–∏ –±—Ä–æ–Ω–∏ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å):"
        reply_markup = cancel_booking_keyboard(bookings)
    
    edited_message = await callback.message.edit_text(text, reply_markup=reply_markup)
    await track_message(state, edited_message)
    await callback.answer()

@router.callback_query(F.data == "user_bookings")
async def user_bookings_handler(callback: CallbackQuery, state: FSMContext):
    await show_user_bookings(callback, state)

@router.callback_query(F.data.startswith("cancel_booking:"))
async def confirm_cancel(callback: CallbackQuery, state: FSMContext):
    await state.update_data(cancel_id=int(callback.data.split(":")[1]))
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="deny_cancel")
        ]
    ])
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?", reply_markup=kb)
    await state.set_state(BookingForm.confirming_cancel)
    await callback.answer()

@router.callback_query(F.data == "confirm_cancel", BookingForm.confirming_cancel)
async def do_cancel(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await cancel_booking(data["cancel_id"])
    await state.clear()
    await callback.answer("–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞!", show_alert=True)
    # –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await show_user_bookings(callback, state)

@router.callback_query(F.data == "deny_cancel", BookingForm.confirming_cancel)
async def deny_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_user_bookings(callback, state)